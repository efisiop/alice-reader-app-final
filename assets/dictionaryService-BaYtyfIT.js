import{a as t}from"./index-CwnXRwLc.js";import{d as y,s as p,g as S}from"./App-DSsQVV2M.js";import"./supabase-B6VQb42p.js";import"./vendor-D_9pIZtk.js";import"./ui-C1_RuqZc.js";const h={Alice:{term:"Alice",definition:"The curious and imaginative protagonist of the story.",examples:["Alice was beginning to get very tired of sitting by her sister on the bank.","Alice had not a moment to think about stopping herself before she found herself falling down a very deep well."],relatedTerms:["protagonist","curious","imaginative"],pronunciation:"/ˈælɪs/",source:"local"},Wonderland:{term:"Wonderland",definition:"The magical and nonsensical world that Alice discovers after falling down the rabbit hole.",examples:["Welcome to Wonderland!","In Wonderland, animals can talk and nothing makes sense."],relatedTerms:["fantasy","magical","dream"],pronunciation:"/ˈwʌndərˌlænd/",source:"local"},Rabbit:{term:"Rabbit",definition:"A white rabbit with pink eyes that Alice follows down the rabbit hole.",examples:["The Rabbit pulled a watch out of his waistcoat pocket.","Oh dear! Oh dear! I shall be late!"],relatedTerms:["white rabbit","pocket watch","waistcoat"],pronunciation:"/ˈræbɪt/",source:"local"},Cheshire:{term:"Cheshire",definition:"Relating to the Cheshire Cat, a mysterious feline known for its distinctive grin that can appear and disappear independently of the rest of its body.",examples:["The Cheshire Cat vanished quite slowly, beginning with the end of the tail, and ending with the grin.","Well! I've often seen a cat without a grin, but a grin without a cat!"],relatedTerms:["cat","grin","vanish","appear"],pronunciation:"/ˈtʃɛʃər/",source:"local"}};async function D(o){var i,r,n,e,a,c,s,f,u,d,g,m,b;try{t("DictionaryService","Fetching from external API","info",{word:o});const v=await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${o}`);if(!v.ok)throw new Error("Word not found in external API");const l=await v.json();if(!l||!l[0]||!l[0].meanings||!l[0].meanings[0])throw new Error("Invalid response format from external API");return{term:o,definition:((n=(r=(i=l[0])==null?void 0:i.meanings[0])==null?void 0:r.definitions[0])==null?void 0:n.definition)||"No definition available",examples:(c=(a=(e=l[0])==null?void 0:e.meanings[0])==null?void 0:a.definitions[0])!=null&&c.example?[(u=(f=(s=l[0])==null?void 0:s.meanings[0])==null?void 0:f.definitions[0])==null?void 0:u.example]:void 0,pronunciation:(d=l[0])==null?void 0:d.phonetic,relatedTerms:(b=(m=(g=l[0])==null?void 0:g.meanings[0])==null?void 0:m.synonyms)==null?void 0:b.slice(0,5),source:"external"}}catch(v){return t("DictionaryService","Error fetching from external API","error",v),null}}function w(o){const i=o.replace(/[.,!?;:'"]/g,"").toLowerCase(),r=i.charAt(0).toUpperCase()+i.slice(1);return h[o]?(t("DictionaryService",`Found exact match for "${o}" in local dictionary`,"debug"),h[o]):h[i]?(t("DictionaryService",`Found lowercase match for "${i}" in local dictionary`,"debug"),h[i]):h[r]?(t("DictionaryService",`Found capitalized match for "${r}" in local dictionary`,"debug"),h[r]):null}async function x(o,i,r,n){try{const e=i.replace(/[.,!?;:'"\/\\()\[\]{}]/g,"").trim();t("DictionaryService","Fetching definition from database","info",{bookId:o,term:e,sectionId:r,chapterId:n});const{data:a,error:c}=await S(o.toString(),e,r==null?void 0:r.toString(),n==null?void 0:n.toString());return c?(t("DictionaryService","Error fetching from database","warning",c),null):a?(t("DictionaryService","Found definition in database","success",{term:e}),{term:i,definition:a,source:"database"}):(t("DictionaryService","No definition found in database","info",{term:e}),null)}catch(e){return t("DictionaryService","Error fetching definition from database","error",e),null}}const E=async()=>(t("DictionaryService","Creating dictionary service","info"),{getDefinition:async(i,r,n,e)=>{t("DictionaryService","Getting definition","info",{bookId:i,term:r,sectionId:n,chapterId:e});const a=r.replace(/[.,!?;:'"\/\\()\[\]{}]/g,"").trim(),c=a.toLowerCase(),s=`definition_${i}_${c}${n?`_${n}`:""}${e?`_${e}`:""}`;try{const f=y.get(s);if(f)return t("DictionaryService","Found definition in cache","success",{term:a,source:f.source}),f;const u=await x(i,a,n,e);if(u)return t("DictionaryService","Found definition in database with context","success",{term:a}),y.set(s,u,24*60*60*1e3),u;const d=w(a);if(d)return t("DictionaryService","Found definition in local dictionary","info",{term:a}),y.set(s,d,24*60*60*1e3),d;const g=await D(a);if(g)return t("DictionaryService","Found definition in external API","info",{term:a}),y.set(s,g,24*60*60*1e3),g;t("DictionaryService","No definition found, using fallback","warning",{term:a});const m={term:r,definition:"No definition available for this term.",source:"fallback"};return y.set(s,m,60*60*1e3),m}catch(f){return t("DictionaryService","Error getting definition","error",{term:a,error:f}),{term:r,definition:"An error occurred while retrieving the definition.",source:"fallback"}}},logDictionaryLookup:async(i,r,n,e,a)=>{try{t("DictionaryService","Logging dictionary lookup","info",{userId:i,bookId:r,sectionId:n,term:e,definitionFound:a}),await p(i.toString(),r.toString(),`Dictionary lookup: ${e}`,a?`Definition found for "${e}"`:`No definition found for "${e}"`,n==null?void 0:n.toString())}catch(c){t("DictionaryService","Error logging dictionary lookup","error",c)}},saveToVocabulary:(i,r,n)=>{try{const e=JSON.parse(localStorage.getItem("userVocabulary")||"{}");e[i]||(e[i]=[]);const a=e[i].findIndex(c=>c.term===r);return a>=0?(t("DictionaryService","Word already exists in vocabulary, updating","info"),e[i][a]={term:r,definition:n,savedAt:new Date().toISOString(),updatedAt:new Date().toISOString()}):e[i].push({term:r,definition:n,savedAt:new Date().toISOString()}),localStorage.setItem("userVocabulary",JSON.stringify(e)),!0}catch(e){return t("DictionaryService","Error saving to vocabulary","error",e),!1}},getUserVocabulary:i=>{try{return JSON.parse(localStorage.getItem("userVocabulary")||"{}")[i]||[]}catch(r){return t("DictionaryService","Error getting user vocabulary","error",r),[]}},removeFromVocabulary:(i,r)=>{try{const n=JSON.parse(localStorage.getItem("userVocabulary")||"{}");if(!n[i])return!1;const e=n[i].findIndex(a=>a.term===r);return e===-1?!1:(n[i].splice(e,1),localStorage.setItem("userVocabulary",JSON.stringify(n)),!0)}catch(n){return t("DictionaryService","Error removing from vocabulary","error",n),!1}},clearDefinitionCache:()=>{y.clear(),t("DictionaryService","Definition cache cleared","info")}});export{E as createDictionaryService};
