import{a as t}from"./index-71oJ6HSp.js";import{d,s as b,l as S,I as D,g as w}from"./App-B5KqkQ9E.js";import"./supabase-DyVhUiSk.js";import"./vendor-D_9pIZtk.js";import"./ui-BYU4eA_z.js";const h={Alice:{term:"Alice",definition:"The curious and imaginative protagonist of the story.",examples:["Alice was beginning to get very tired of sitting by her sister on the bank.","Alice had not a moment to think about stopping herself before she found herself falling down a very deep well."],relatedTerms:["protagonist","curious","imaginative"],pronunciation:"/ˈælɪs/",source:"local"},Wonderland:{term:"Wonderland",definition:"The magical and nonsensical world that Alice discovers after falling down the rabbit hole.",examples:["Welcome to Wonderland!","In Wonderland, animals can talk and nothing makes sense."],relatedTerms:["fantasy","magical","dream"],pronunciation:"/ˈwʌndərˌlænd/",source:"local"},Rabbit:{term:"Rabbit",definition:"A white rabbit with pink eyes that Alice follows down the rabbit hole.",examples:["The Rabbit pulled a watch out of his waistcoat pocket.","Oh dear! Oh dear! I shall be late!"],relatedTerms:["white rabbit","pocket watch","waistcoat"],pronunciation:"/ˈræbɪt/",source:"local"},Cheshire:{term:"Cheshire",definition:"Relating to the Cheshire Cat, a mysterious feline known for its distinctive grin that can appear and disappear independently of the rest of its body.",examples:["The Cheshire Cat vanished quite slowly, beginning with the end of the tail, and ending with the grin.","Well! I've often seen a cat without a grin, but a grin without a cat!"],relatedTerms:["cat","grin","vanish","appear"],pronunciation:"/ˈtʃɛʃər/",source:"local"}};async function x(c){var i,n,r,e,a,o,s,f,u,g,y,m,p;try{t("DictionaryService","Fetching from external API","info",{word:c});const v=await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${c}`);if(!v.ok)throw new Error("Word not found in external API");const l=await v.json();if(!l||!l[0]||!l[0].meanings||!l[0].meanings[0])throw new Error("Invalid response format from external API");return{term:c,definition:((r=(n=(i=l[0])==null?void 0:i.meanings[0])==null?void 0:n.definitions[0])==null?void 0:r.definition)||"No definition available",examples:(o=(a=(e=l[0])==null?void 0:e.meanings[0])==null?void 0:a.definitions[0])!=null&&o.example?[(u=(f=(s=l[0])==null?void 0:s.meanings[0])==null?void 0:f.definitions[0])==null?void 0:u.example]:void 0,pronunciation:(g=l[0])==null?void 0:g.phonetic,relatedTerms:(p=(m=(y=l[0])==null?void 0:y.meanings[0])==null?void 0:m.synonyms)==null?void 0:p.slice(0,5),source:"external"}}catch(v){return t("DictionaryService","Error fetching from external API","error",v),null}}function A(c){const i=c.replace(/[.,!?;:'"]/g,"").toLowerCase(),n=i.charAt(0).toUpperCase()+i.slice(1);return h[c]?(t("DictionaryService",`Found exact match for "${c}" in local dictionary`,"debug"),h[c]):h[i]?(t("DictionaryService",`Found lowercase match for "${i}" in local dictionary`,"debug"),h[i]):h[n]?(t("DictionaryService",`Found capitalized match for "${n}" in local dictionary`,"debug"),h[n]):null}async function T(c,i,n,r){try{const e=i.replace(/[.,!?;:'"\/\\()\[\]{}]/g,"").trim();t("DictionaryService","Fetching definition from database","info",{bookId:c,term:e,sectionId:n,chapterId:r});const{data:a,error:o}=await w(c.toString(),e,n==null?void 0:n.toString(),r==null?void 0:r.toString());return o?(t("DictionaryService","Error fetching from database","warning",o),null):a?(t("DictionaryService","Found definition in database","success",{term:e}),{term:i,definition:a,source:"database"}):(t("DictionaryService","No definition found in database","info",{term:e}),null)}catch(e){return t("DictionaryService","Error fetching definition from database","error",e),null}}const N=async()=>(t("DictionaryService","Creating dictionary service","info"),{getDefinition:async(i,n,r,e)=>{t("DictionaryService","Getting definition","info",{bookId:i,term:n,sectionId:r,chapterId:e});const a=n.replace(/[.,!?;:'"\/\\()\[\]{}]/g,"").trim(),o=a.toLowerCase(),s=`definition_${i}_${o}${r?`_${r}`:""}${e?`_${e}`:""}`;try{const f=d.get(s);if(f)return t("DictionaryService","Found definition in cache","success",{term:a,source:f.source}),f;const u=await T(i,a,r,e);if(u)return t("DictionaryService","Found definition in database with context","success",{term:a}),d.set(s,u,24*60*60*1e3),u;const g=A(a);if(g)return t("DictionaryService","Found definition in local dictionary","info",{term:a}),d.set(s,g,24*60*60*1e3),g;const y=await x(a);if(y)return t("DictionaryService","Found definition in external API","info",{term:a}),d.set(s,y,24*60*60*1e3),y;t("DictionaryService","No definition found, using fallback","warning",{term:a});const m={term:n,definition:"No definition available for this term.",source:"fallback"};return d.set(s,m,60*60*1e3),m}catch(f){return t("DictionaryService","Error getting definition","error",{term:a,error:f}),{term:n,definition:"An error occurred while retrieving the definition.",source:"fallback"}}},logDictionaryLookup:async(i,n,r,e,a)=>{try{t("DictionaryService","Logging dictionary lookup","info",{userId:i,bookId:n,sectionId:r,term:e,definitionFound:a}),await b(i.toString(),n.toString(),`Dictionary lookup: ${e}`,a?`Definition found for "${e}"`:`No definition found for "${e}"`,r==null?void 0:r.toString()),await S(i.toString(),D.DEFINITION_LOOKUP,{bookId:n.toString(),sectionId:r==null?void 0:r.toString(),content:e,definitionFound:a}).catch(o=>{t("DictionaryService","Error logging definition lookup interaction","error",o)})}catch(o){t("DictionaryService","Error logging dictionary lookup","error",o)}},saveToVocabulary:(i,n,r)=>{try{const e=JSON.parse(localStorage.getItem("userVocabulary")||"{}");e[i]||(e[i]=[]);const a=e[i].findIndex(o=>o.term===n);return a>=0?(t("DictionaryService","Word already exists in vocabulary, updating","info"),e[i][a]={term:n,definition:r,savedAt:new Date().toISOString(),updatedAt:new Date().toISOString()}):e[i].push({term:n,definition:r,savedAt:new Date().toISOString()}),localStorage.setItem("userVocabulary",JSON.stringify(e)),!0}catch(e){return t("DictionaryService","Error saving to vocabulary","error",e),!1}},getUserVocabulary:i=>{try{return JSON.parse(localStorage.getItem("userVocabulary")||"{}")[i]||[]}catch(n){return t("DictionaryService","Error getting user vocabulary","error",n),[]}},removeFromVocabulary:(i,n)=>{try{const r=JSON.parse(localStorage.getItem("userVocabulary")||"{}");if(!r[i])return!1;const e=r[i].findIndex(a=>a.term===n);return e===-1?!1:(r[i].splice(e,1),localStorage.setItem("userVocabulary",JSON.stringify(r)),!0)}catch(r){return t("DictionaryService","Error removing from vocabulary","error",r),!1}},clearDefinitionCache:()=>{d.clear(),t("DictionaryService","Definition cache cleared","info")}});export{N as createDictionaryService};
