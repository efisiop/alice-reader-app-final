name: Deploy Production Build to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create env file
        run: |
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }}" >> .env.production
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }}" >> .env.production
          echo "VITE_APP_ENV=production" >> .env.production
          echo "VITE_BETA_MODE=false" >> .env.production

      - name: Remove Test Components
        run: |
          # Remove test directories
          rm -rf src/components/test src/pages/test src/mocks

          # Remove specific test files
          rm -f src/components/ServiceRegistryTest.tsx
          rm -f src/components/TestServiceRegistry.tsx
          rm -f src/pages/ServiceRegistryTestPage.tsx
          rm -f src/AppTest.tsx
          rm -f src/main-test.tsx
          
          # Create a clean version of App.tsx without any test references
          cat > src/App.tsx << 'EOF'
          import React, { useEffect, useState } from 'react';
          import { HashRouter as Router, Routes, Route } from 'react-router-dom';
          import './App.css';
          import './styles/accessibility.css';

          // Components
          import { ServiceStatusCheck } from '@components/Admin/ServiceStatusCheck';
          import { AccessibilityProvider } from './components/common/AccessibilityMenu';
          import SkipToContent from './components/common/SkipToContent';

          // Pages
          import LandingPage from './pages/LandingPage';
          import LoginPage from './pages/Auth/LoginPage';
          import RegisterPage from './pages/Auth/RegisterPage';
          import VerifyPage from './pages/Auth/VerifyPage';
          import ForgotPasswordPage from './pages/Auth/ForgotPasswordPage';
          import ReaderDashboard from './pages/Reader/ReaderDashboard';
          import ReaderPage from './pages/Reader/ReaderPage';
          import ReaderStatistics from './pages/Reader/ReaderStatistics';
          import ConsultantDashboard from './pages/Consultant/ConsultantDashboard';
          import ReadersList from './pages/Consultant/ReadersList';
          import HelpRequests from './pages/Consultant/HelpRequests';
          import AdminDashboard from './pages/Admin/AdminDashboard';
          import { ConsultantDashboardPage } from './pages/Consultant/ConsultantDashboardPage';
          import { ProtectedRoute } from './components/common/ProtectedRoute';

          // Services
          import { initializeServices } from './services';
          import { AppError } from './utils/errorHandling';
          import { appLog } from './components/LogViewer';
          import { AuthProvider } from './contexts/AuthContext';

          function App() {
            const [initialized, setInitialized] = useState(false);
            const [error, setError] = useState<string | null>(null);

            useEffect(() => {
              const init = async () => {
                try {
                  appLog('App', 'Initializing services', 'info');
                  await initializeServices();
                  setInitialized(true);
                  appLog('App', 'Services initialized successfully', 'success');
                } catch (err: any) {
                  console.error('Failed to initialize services:', err);
                  appLog('App', `Failed to initialize services: ${err.message}`, 'error');
                  setError('Failed to initialize application. Please check the console for details.');
                }
              };

              init();
            }, []);

            if (error) {
              return (
                <div className="error-container">
                  <h2>Initialization Error</h2>
                  <p>{error}</p>
                  <button onClick={() => window.location.reload()}>Retry</button>
                </div>
              );
            }

            if (!initialized) {
              return (
                <div className="loading-container">
                  <h2>Initializing Application...</h2>
                  <p>Please wait while the services are being initialized.</p>
                </div>
              );
            }

            const AppContent = () => (
              <Router>
                <div className="App">
                  <SkipToContent contentId="main-content" />
                  <main id="main-content">
                    <Routes>
                      {/* Public Routes */}
                      <Route path="/" element={<LandingPage />} />
                      <Route path="/login" element={<LoginPage />} />
                      <Route path="/register" element={<RegisterPage />} />
                      <Route path="/verify" element={<VerifyPage />} />
                      <Route path="/forgot-password" element={<ForgotPasswordPage />} />

                      {/* Reader Routes */}
                      <Route path="/reader" element={<ReaderDashboard />} />
                      <Route path="/reader/:bookId/page/:pageNumber" element={<ReaderPage />} />
                      <Route path="/reader/statistics" element={<ReaderStatistics />} />

                      {/* Consultant Routes */}
                      <Route path="/consultant" element={<ConsultantDashboard />} />
                      <Route path="/consultant/readers" element={<ReadersList />} />
                      <Route path="/consultant/help-requests" element={<HelpRequests />} />
                      <Route 
                        path="/consultant-dashboard" 
                        element={
                          <ProtectedRoute requiredRole="consultant">
                            <ConsultantDashboardPage />
                          </ProtectedRoute>
                        } 
                      />

                      {/* Admin Routes */}
                      <Route path="/admin" element={<AdminDashboard />} />

                      {/* Admin Routes - Service Status */}
                      <Route path="/service-status" element={<ServiceStatusCheck />} />
                    </Routes>
                  </main>
                </div>
              </Router>
            );

            // Wrap with providers
            return (
              <AuthProvider>
                <AccessibilityProvider>
                  <AppContent />
                </AccessibilityProvider>
              </AuthProvider>
            );
          }

          export default App;
          EOF

      - name: Update tsconfig.app.json
        run: |
          cat > tsconfig.app.json << 'EOF'
          {
            "compilerOptions": {
              "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
              "target": "ES2020",
              "useDefineForClassFields": true,
              "lib": ["ES2020", "DOM", "DOM.Iterable"],
              "module": "ESNext",
              "skipLibCheck": true,

              /* Bundler mode */
              "moduleResolution": "bundler",
              "allowImportingTsExtensions": true,
              "isolatedModules": true,
              "moduleDetection": "force",
              "noEmit": true,
              "jsx": "react-jsx",

              /* Linting */
              "strict": true,
              "noUnusedLocals": true,
              "noUnusedParameters": true,
              "noFallthroughCasesInSwitch": true,
              "noUncheckedSideEffectImports": true,

              /* Path aliases */
              "baseUrl": ".",
              "paths": {
                "@/*": ["./src/*"],
                "@components/*": ["./src/components/*"],
                "@services/*": ["./src/services/*"],
                "@utils/*": ["./src/utils/*"],
                "@types/*": ["./src/types/*"],
                "@hooks/*": ["./src/hooks/*"],
                "@data/*": ["./src/data/*"],
                "@constants/*": ["./src/constants/*"],
                "@contexts/*": ["./src/contexts/*"],
                "@theme/*": ["./src/theme/*"]
              }
            },
            "include": ["src"],
            "exclude": [
              "node_modules",
              "dist",
              "src/components/test",
              "src/pages/test",
              "src/mocks",
              "**/__tests__/**",
              "**/*.test.ts",
              "**/*.test.tsx",
              "**/*.spec.ts",
              "**/*.spec.tsx"
            ]
          }
          EOF

      - name: Build project
        run: npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: "vite"

      - name: Create 404.html
        run: cp dist/index.html dist/404.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"
          retention-days: 1

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
